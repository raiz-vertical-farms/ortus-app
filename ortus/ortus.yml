esphome:
  name: ortus
  name_add_mac_suffix: true
  friendly_name: Ortus Device

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# OTA (ESPHome dashboard + fallback safe mode)
ota:
  - platform: esphome
    password: !secret ota_password
  - platform: safe_mode

# BLE & Serial provisioning
improv_ble:
improv_serial:

# --- Wi-Fi Fallback (when not provisioned) ---
wifi:
  ap:
    ssid: "Ortus-Provision-${name}"
    password: "OrtusSetup123!"   # Change to strong random password

captive_portal:

# --- MQTT connection (HiveMQ Cloud) ---
mqtt:
  broker: 9876023c4d284b20b60c66d5141514c2.s1.eu.hivemq.cloud
  port: 8883
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: ortus/v1/${name}
  ssl_fingerprints:
    - "AA:BB:CC:DD:EE:FF:..."   # Replace with real TLS fingerprint

# Example GPIO device (relay on GPIO2)
switch:
  - platform: gpio
    pin: 2
    name: "${friendly_name} Relay"

# --- OTA update via MQTT command ---
mqtt_subscribe:
  - topic: ortus/v1/${name}/update
    id: update_cmd

script:
  - id: ota_update_script
    then:
      - lambda: |-
          std::string url = id(update_cmd).state.c_str();
          if (url.length() > 0) {
            ESP_LOGI("ota", "Starting OTA update from %s", url.c_str());
            auto ota = new esphome::ota::OTAComponent();
            ota->set_url(url);
            ota->start_safe_update();
          } else {
            ESP_LOGW("ota", "Update command received but URL was empty");
          }
